import numpy as npimport pandas as pdimport timeimport randomfrom sklearn import metricsfrom scipy.stats.stats import pearsonrfrom scGNGI_model import scGNGI# [1] data preprocessing #df = pd.read_csv('./data/GSE75748/GSE75748_sc_cell_type_ec.csv', index_col=0) # dimension = (genes x cells)#df = pd.read_csv('./data/GSE90806/GSE90806_RIP-Cre_ARC_GeneCounts_duplicate_removal.csv', index_col=0) # dimension = (genes x cells)#df = pd.read_csv('./data/scRNA_data1_group1_5/scRNA_data1_group1_5.csv', index_col=0) # dimension = (genes x cells)#df = pd.read_csv('./data/scRNA_data2_group1_4/scRNA_data2_group1_4.csv', index_col=0) # dimension = (genes x cells)print("starting preprocessing:")n1 = df.shape[0] # rown2 = df.shape[1] # colgene_names = []cell_names = []for i in range(n1):    cnt = 0    tmp = df.iloc[i,:]    for j in range(n2):        if tmp[j] != 0:            cnt += 1    if cnt < 5:        gene_names.append(df.index[i])for i in range(n2):    cnt = 0    tmp = df.iloc[:,i]    for j in range(n1):        if tmp[j] != 0:            cnt += 1    if cnt < 200:        cell_names.append(df.columns[i])print("gene_names, cell_names: ", gene_names, cell_names)df=df.drop(index=gene_names)df=df.drop(columns=cell_names)df.to_csv('./data/GSE75748/GSE75748_sc_cell_type_ec_proprecessing.csv')#df.to_csv('./data/GSE90806/GSE90806_RIP-Cre_ARC_GeneCounts_duplicate_removal_proprecessing.csv')#df.to_csv('./data/scRNA_data1_group1_5/scRNA_data1_group1_5_proprecessing.csv')#df.to_csv('./data/scRNA_data2_group1_4/scRNA_data2_group1_4_proprecessing.csv')# [2] load data #i_=35 # missing10 15 20 25 30 35df_ = pd.read_csv('./data/GSE75748/GSE75748_sc_cell_type_ec_preprocessing.csv', index_col=0) # dimension = (genes x cells)#df = pd.read_csv('./data/scRNA_data3_group1_3/scRNA_data3_group1_3_proprecessing.csv', index_col=0) # dimension = (genes x cells)#df_ = pd.read_csv('./data/scRNA_data3_group1_3/scRNA_data3_group1_3_proprecessing_missing'+str(i_)+'.csv', index_col=0) # dimension = (genes x cells)#df_ = pd.read_csv('./data/scRNA_data3_group1_3/scRNA_data3_group1_3_proprecessing.csv', index_col=0) # dimension = (genes x cells)n1 = df_.shape[0]n2 = df_.shape[1]cell_type = 7 # 7,2,5,4,3print("n1, n2:", n1, n2)# algorithm optionsoptions = {    # general    'verbose' : True,    'alpha' : 1,      # number of iterations    'max_outer_iter' : 10,    'max_inner_iter': 2000,    # early stopping criteria (-1 to disable a criterion)    'stop_relRes':  5e-14,    'stop_relDiff': 5e-14,}# [3] calculate full matrix, mask and corresponding observed matrix #X0 =  df.values.copy()X0_log = df.values.copy()X0_log = np.log2(X0_log+1) # 取对数omega = df_.values.copy()for i in range(n1):    for j in range(n2):        if omega[i,j] != 0:            omega[i,j] = 1X = df_.values.copy()X_log = df_.values.copy() X_log = np.log2(X_log+1)# 取对数# calculate mask mis_n_percentomega_raw_0 = df.values.copy()for i in range(n1):    for j in range(n2):        if omega_raw_0[i,j] != 0:            omega_raw_0[i,j] = 0        else:            omega_raw_0[i,j] = 1           omega_mis_0 = df_.values.copy()for i in range(n1):    for j in range(n2):        if omega_mis_0[i,j] != 0:            omega_mis_0[i,j] = 0        else:            omega_mis_0[i,j] = 1omega_mis_n_0 = omega_mis_0 - omega_raw_0# [4] run scGNGI #print("Starting gene imputation ...")start = time.time()X_hat_log, iter, _, _ = scGNGI(X_log, omega, cell_type, **options)end = time.time()for i in range(n1):    for j in range(n2):        if X_hat_log[i,j] < 0:            X_hat_log[i,j] = 0# [5] report # print("iter: ", iter, ". elapsed time:", end - start)true_error = np.linalg.norm(X_hat_log - X0_log, ord='fro') / np.linalg.norm(X0_log, ord='fro')observed_error = np.linalg.norm((X_hat_log - X0_log) * omega, ord='fro') / np.linalg.norm(X0_log, ord='fro')missing_n_percent_error = np.linalg.norm((X_hat_log - X0_log) * omega_mis_n_0, ord='fro') / np.linalg.norm(X0_log, ord='fro')print('true error: {}, observed error: {}, missing_n_percent_error: {}'.format(true_error, observed_error, missing_n_percent_error))X_hat = X_hat_log.copy()for i in range(n1):    for j in range(n2):        X_hat[i,j] = np.power(2,X_hat[i,j]) - 1X_hat_ = X_hat * omega_mis_0X_imputed = X + X_hat_                 # [6] save #imputed_ = pd.DataFrame(X_imputed, index=df.index, columns=df.columns) # dimension = (genes x cells)imputed_.to_csv('./data/GSE75748/GSE75748_sc_cell_type_ec_preprocessing_scGNGI/GSE75748_sc_cell_type_ec_preprocessing_scGNGI_r7.csv')#imputed_.to_csv('./data/scRNA_data3_group1_3/scRNA_data3_group1_3_proprecessing_scGNGI/scRNA_data3_group1_3_proprecessing_scGNGI_r3.csv')